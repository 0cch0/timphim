---
import Layout from '../../layouts/Layout.astro'
import PersonList from '../../components/PersonList.astro'
import tmdb from '../../tmdb.ts'
import yts from '../../yts.ts'
import eztv from '../../eztv.ts'

const { media_type, media_id } = Astro.params
const type_name = media_type == 'movie' ? 'Phim lẻ' : 'Phim bộ'
const media = await tmdb.get(`/${media_type}/${media_id}`, { 
	append_to_response: 'credits,external_ids'
})

let torrents = []
if (media_type == 'movie' && media.external_ids.imdb_id) {
	try {
		const data = await yts.get(media.external_ids.imdb_id)
		torrents = data.data?.movie?.torrents || []
	} catch {}
}
if (media_type == 'tv' && media.external_ids.imdb_id) {
	try {
		const data = await eztv.get(media.external_ids.imdb_id)
		torrents = data.torrents || []
	} catch {}
}

if (!media.id) {
	return Astro.rewrite("/404")
}

const title = media.title || media.name
const original_title = media.original_title || media.original_name
const subtitle = () => {
	if (title != original_title) {
		return original_title
	}
	return ''
}
const date = media.release_date || media.first_air_date
const year = date.slice(0, 4)
const person_list = [...media.credits.crew.filter(x => x.job == 'Director'), ...media.credits.cast]

function pageTitle() {
	let years = year
	if (media.last_air_date) {
		let lastYear = media.last_air_date.slice(0, 4)
		if (lastYear != year) {
			years += ' - ' + lastYear
		}
	}
	return `${title} (${years})`
}

function quality(torrent) {
	if (torrent.quality) return torrent.quality
	if (torrent.filename) {
		if (torrent.filename.includes('480p')) return '480p'
		if (torrent.filename.includes('720p')) return '720p'
		if (torrent.filename.includes('1080p')) return '1080p'
		if (torrent.filename.includes('2160p')) return '2160p'
	}
	return '—'
}

function magnetLink(hash) {
	return `magnet:?xt=urn:btih:${hash}`
}

function trailerLink() {
	const query = title.replace(' ', '+')
	return `https://www.youtube.com/results?search_query=${query}+trailer`
}

function subtitlesLink() {
	const query = title.replace(' ', '+')
	return `https://subsource.net/search?q=${query}`
}

function size(bytes, decimals = 2) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

function created(torrent) {
	const unix = torrent.date_uploaded_unix || torrent.date_released_unix
	const date = new Date(unix * 1000)
	return date.toLocaleDateString('en-CA')
}
---

<Layout title={pageTitle()}>
	<b>{type_name} / {pageTitle()}</b>
	<hr class="hr-dot">

	<div class="media m">
		<div class="details">
			<b>{title}</b>
			<div class="subtitle"><b>{subtitle}</b></div>
			<div class="genres">
				{media.genres.map((genre) => (
					<div class="genre">{genre.name}</div>
				))}
			</div>
			<p class="tagline"><i>{media.tagline}</i></p>
			<p>{media.overview}</p>
			<a href={trailerLink()} target="_blank">
				<button class="trailer">Xem Trailer</button>
			</a>
			<a href={subtitlesLink()} target="_blank" style="margin-left: 0.5rem;">
				<button class="trailer">Phụ đề</button>
			</a>
		</div>
		<div class="frame">
			<img src={`https://image.tmdb.org/t/p/w300${media.poster_path}`} draggable="false" />
			{media.number_of_seasons && (
			<div class="frame-tag" style="top:0;left:0">{media.number_of_seasons} season</div>
			)}
			<div class="frame-tag" style="top:0; right:0">{media.original_language}</div>
			<div class="frame-title">{date}</div>
		</div>
	</div>

	<div class="m">
		<b>Diễn viên</b>
		<hr class="hr-dash">
		<PersonList list={person_list} />
	</div>

	{torrents.length > 0 && (
	<div class="m">
		<b>Torrents</b>
		<hr class="hr-dash">
		<table>
			<thead>
				<tr>
					<th>Name</th>
					<th>Quality</th>
					<th style="min-width: 6rem">Size</th>
					<th>Seeds</th>
					<th style="min-width: 6rem">Created</th>
					<th>Link</th>
				</tr>
			</thead>
			<tbody>
				{torrents.map(t => (
				<tr>
					<td><div class="text-wrap">{t.filename || '—'}</div></td>
					<td>{quality(t)}</td>
					<td>{size(t.size_bytes)}</td>
					<td>{t.seeds || '—'}</td>
					<td>{created(t)}</td>
					<td>
						<a href={magnetLink(t.hash)}>
							<button class="magnet">MAGNET</button>
						</a>
					</td>
				</tr>
				))}
			</tbody>
		</table>
	</div>
	)}
</Layout>

<style>
	.m {
		margin: 2rem 0;
	}
	.media {
		display: flex;
		flex-wrap: wrap;
		gap: 1rem;
		img {
			width: 100%;
			height: 100%;
			aspect-ratio: 2/3;
		}
	}
	.details {
		min-width: 22rem;
		flex: 1;
	}
	p {
		margin: .6rem 0;
		line-height: 1.5rem;
		word-spacing: .15rem;
	}
	.subtitle {
		margin: .2rem 0;
		color: gray;
	}
	.tagline {
		color: gray;
	}
	.genres {
		display: flex;
		flex-wrap: wrap;
		gap: .5rem;
		margin: .8rem 0;
	}
	.genre {
		padding: .15rem .5rem;
		border: 1px dotted gray;
		text-transform: uppercase;
		text-align: center;
	}
	button.trailer {
		margin: 1rem 0;
		padding: .25rem 1.4rem;
	}
	table {
		border-collapse: collapse;
		border-spacing: 0;
		border-top: 2px dotted silver;
		border-left: 4px solid gray;
		box-shadow: 2px 2px silver;
		text-align: left;
	}
	th {
		border-left: 1px solid silver;
		border-right: 1px solid silver;
		border-bottom: 1px solid gray;
	}
	tbody tr:hover {
		background: gainsboro;
	}
	td {
		border: 1px solid silver;
		text-wrap: wrap;
	}
	th, td {
		padding: .2rem .4rem;
	}
	button.magnet {
		padding: .1rem 1rem;
		background: steelblue;
		color: white;
	}
	.text-wrap {
		max-width: 29rem;
		text-wrap: wrap;
		word-wrap: break-word;
	}
</style>
